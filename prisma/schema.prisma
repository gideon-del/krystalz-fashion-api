// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(uuid())
  first_name String 
  last_name String
  email String @unique
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
  password String
  role Role
  isVerified Boolean @default(false)
  cart Cart?
  order Order[]
}
enum Role {
  ADMIN
  USER
}

model Address {
  id String @id @default(uuid())
  address String 
  city String
  state String
  transport_fee Float
  
}
model Category {
  id String @id @default(uuid())
  name String @unique
  Product Product[]
}
model Product {
  id String @id @default(uuid())
  name String
  description String
  total_quantity Int
  size Size[]
  category Category @relation(fields: [categoryId],references: [id])
  categoryId String
  productImages ProductImages[]
}
model ProductImages {
 id String @id @default(uuid())
 image_url String?
  produc_id String
  product Product @relation(fields: [produc_id],references: [id])
}
model Size {
  id String @id @default(uuid())
  name String
  quantity Int
  price Float
  product Product @relation(fields: [productId], references: [id])
  productId String
  cartProduct CartProduct[]
  order Orders[]
  inventorySize InventorySize[]
}
model Cart {
  id String @id @default(uuid())
  userId String @unique
  total Float
  user User @relation(fields: [userId], references: [id])
  
  cartProduct CartProduct[]
}

model CartProduct {
  id String @id @default(uuid())
  cart_id String
  size_id String 
  quantity Int
  size Size @relation(fields: [size_id], references: [id])
  cart Cart @relation(fields: [cart_id], references: [id],onDelete: Cascade)
  @@unique(fields: [cart_id,size_id])
}

model Order {
  id String @id @default(uuid())
  user_id String
  paystack_reference String
  status OrderStatus
  total Float
  authorization_url String
  user User @relation(fields: [user_id],references: [id])
  orders Orders[]
  transactions Transactions[]

}
enum OrderStatus {
    PENDING
    APPROVED
    REJECTED
}

model Orders {
id String @id @default(uuid())
order_id String 
size_id String
sold_quantity Int
order Order @relation(fields: [order_id],references: [id])
size Size @relation(fields: [size_id],references: [id])

}

model Transactions {
  id String @id @default(uuid())
  order_id String
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
  order Order @relation(fields: [order_id],references: [id])

}

model Inventory {
  id String @id @default(uuid())
  product_id String
  quantity_sold Int
  remaining_stock Int
  status InventoryStatus

  inventorySize InventorySize[]
}
model InventorySize {
  id String @id @default(uuid())
  inventory_id String
  size_id String
  quantity_sold Int
  remaining_stock Int
  status InventoryStatus
  size Size @relation(fields: [size_id],references: [id])
  inventory Inventory @relation(fields: [inventory_id],references: [id])
}

enum InventoryStatus {
  INSTOCK
  ALMOSTOUT
  OUTOFSTOCK
}